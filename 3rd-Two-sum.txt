Accepted-own-code


public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        int[] resul1t = new int[2];
        for(var i= 0; i < nums.Length; i++)
            {
                for (var j=i+1;j<nums.Length;j++)
                {
                    if ((nums[i] + nums[j]) == target)
                    {
                        resul1t[0] = i;
                        resul1t[1] = j;
                        break;
                    }
                    
                }
            }
        return resul1t;    
    }
}



Partialy accepted

int result;
            int[] resul1t = new int[2];
            Dictionary<int, int> dict1 = new Dictionary<int, int>();

            for(var i=0;i<nums.Length;i++)
            {
                
                result = target - nums[i];
                if (dict1.ContainsKey(result))
                {
                    resul1t[0] = dict1[result];
                    resul1t[1] = i;
                }
                else
                {
                    dict1.Add(nums[i], i);
                }
            }


Java Solution :-

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];

        for (var i=0;i<nums.length;i++)
        {
            for (var j=i+1 ;j<nums.length;j++)
            {
                if(nums[i] + nums[j]==target)
                {
                    result[0] = i;
                    result[1] = j;
                    break;
                }
            }
        }
        return result;
    }
}




Java Solution:- not o(n^2) less than o(n^2)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Stack<Integer> stack= new Stack<>();
        int[] result = new int[2];
        for (var i = 0;i<nums.length;i++)
        {
            int count = 0;

            if (!stack.isEmpty())
            {

                while (count < stack.size()) {
                    if (nums[i] + stack.get(count) == target) {
                        result[0] = i;
                        result[1] = count;
                    }
                    count++;
                }
            }
            stack.add(nums[i]);
        }
        return result;
    }
}

